// CSS LOCKS

// $min-size: minimum element $property size in $unit specified
// $max-size: maximum element $property size in $unit specified
// $min-width: the screen width in $units where you want to lock in the $min-size
// $max-width: the screen width in $units where you want to lock in the $max-size
// $property: the property of the element that you would like to scale/lock
// $unit: the units which all measurements are taken in

$css-lock-min: 320;
$css-lock-max: 1240;

@mixin css-lock(
  $min-size: 16,
  $max-size: 24,
  $min-width: $css-lock-min,
  $max-width: $css-lock-max,
  $property: font-size,
  $unit: px) {

  #{$property}: calc(#{$min-size}#{$unit} + (#{$max-size} - #{$min-size}) * ((100vw - #{$min-width}#{$unit}) / (#{$max-width} - #{$min-width})));

  @media (max-width: #{$min-width}#{$unit}) {
    #{$property}: #{$min-size}#{$unit};
  }

  @media (min-width: #{$max-width}#{$unit}) {
    #{$property}: #{$max-size}#{$unit};
  }
}

// SCROLLING SHADOWS

// $orientation: scrolling orientation
// $background-color: background color of the box,
// $shadow-intensity: shadow opacity,
// $shadow-color: shadow color,
// $cover-size: 40px,
// $shadow-size: 14px

@mixin scrolling-shadows(
  $orientation: "H", // H to horizontal and V to vertical
  $background-color: rgb(255, 255, 255),
  $shadow-intensity: .2,
  $shadow-color: rgb(0,0,0),
  $cover-size: 40px,
  $shadow-size: 14px) {

  // variations between H and V
  $angle: 90deg;
  $bg-sizes: ( $cover-size 100%, $shadow-size 100% );
  $gradient-sizes: ( 100% 0, 0 50%, 100% 50% );

  @if $orientation == "V" {
    $angle: 0deg;
    $bg-sizes: ( 100% $cover-size, 100% $shadow-size );
    $gradient-sizes: ( 0 100%, 50% 0, 50% 100% );
  }

  background:
    // Shadow covers
    linear-gradient($angle, $background-color 30%, rgba($background-color, 0)),
    linear-gradient($angle, rgba($background-color, 0), $background-color 70%) nth($gradient-sizes, 1),

    // Shadows
    radial-gradient(nth($gradient-sizes, 2), farthest-side, rgba($shadow-color, $shadow-intensity), rgba($shadow-color, 0)),
    radial-gradient(nth($gradient-sizes, 3), farthest-side, rgba($shadow-color, $shadow-intensity), rgba($shadow-color, 0)) nth($gradient-sizes, 1);

  background:
    // Shadow covers
    linear-gradient($angle, $background-color 30%, rgba($background-color, 0)),
    linear-gradient($angle, rgba($background-color, 0), $background-color 70%) nth($gradient-sizes, 1),

    // Shadows
    radial-gradient(farthest-side at nth($gradient-sizes, 2), rgba($shadow-color, $shadow-intensity), rgba($shadow-color, 0)),
    radial-gradient(farthest-side at nth($gradient-sizes, 3), rgba($shadow-color, $shadow-intensity), rgba($shadow-color, 0)) nth($gradient-sizes, 1);
  background-color: $background-color;
  background-repeat: no-repeat;
  background-size: nth($bg-sizes, 1), nth($bg-sizes, 1), nth($bg-sizes, 2), nth($bg-sizes, 2);

  // Opera doesn't support this in the shorthand
  background-attachment: local, local, scroll, scroll;

  // Chrome for Android needs this
  border-radius: 1px;
}

/// REMOVE THE UNIT OF A LENGTH

/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}


// STAGGER ANIMATION

// $type: delay animation or transition properties
// $num-child: number of element children
// $delay: delay to apply to each
@mixin stagger-children($type, $num-child, $delay) {
  @for $i from 1 through $num-child {
    &:nth-child(#{$i}) {
      #{$type}-delay: #{$i * $delay}ms;
    }
  }
}


// CALC THE WAIT
// Calculate the keyframe percentages so that you can 
// insert a delay between each animation iteration
// Example/Use:
// @include waitAnimate(
//  (
//    animationName: animName,
//    keyframes: (
//      0: (
//        transform: scale(1),
//        background-color: blue
//      ),
//      50: (
//        transform: scale(2),
//        background-color: green
//      ),
//      100: (
//        transform: scale(3),
//        background-color: red
//      )
//    ),
//    duration: 2,
//    waitTime: 1,
//    timingFunction: ease,
//    iterationCount: infinite
//  )
//);
@mixin waitAnimate($options: ()) {

  $options: map-merge((
    animationName: waitAnimate,
    duration: 1,
    waitTime: 0,
    timingFunction: linear,
    iterationCount: infinite
  ), $options);

  $name: map-get($options, animationName);
  $kf: map-get($options, keyframes);
  $kfLength: length($kf);
  $duration: map-get($options, duration);
  $waitTime: map-get($options, waitTime);
  $timingFunction: map-get($options, timingFunction);
  $iterationCount: map-get($options, iterationCount);
  $counter: 1; // index of 'each'

  @keyframes #{$name} {
    @each $frame, $prop in $kf {
      #{$frame * $duration / ($duration + $waitTime)}% {
        @each $k, $v in $prop {
          #{$k}: #{$v}
        }
      }
      // if last in loop and waitTime is not 0, add the last frame as 100% (this is what creates the pause)
      @if $counter == $kfLength and $waitTime > 0 {
        100% {
          @each $k, $v in $prop {
            #{$k}: #{$v}
          }
        }
      }
      $counter: $counter+1;
    }
  }

  .#{$name} {
    animation: #{$name} #{$duration + $waitTime}s #{$timingFunction} #{$iterationCount};
  }

}
